import pytest
import time
import sys
import math
from functools import reduce

from main import get_min, get_max, get_sum, get_multiply, get_pow_of_sum

test_data = [
    [1, 2, 3, 4],
    [13, 874, 6, 23, 94, 5, 62, 35],
    [8534, 47, 5390, 26, 345, 62, 364, 56, 234, 95, 6083, 284, 509, 23, 450, 63, 62, 40, 75, 602, 634, 123, 46457, 634,
     592, 487, 234, 652, 349, 34795, 721, 438, 523, 749, 2534, 587, 627, 623, 409, 394, 866, 126, 498, 214, 865,
     762, 348, 723, 457, 6128, 359, 123, 18458, 615, 233, 487, 8791, 286, 767, 591, 623, 8740, 756, 658, 345, 8476,
     1926, 5470, 8173, 424, 751, 828, 634, 89961, 243, 8047, 807, 324, 50399, 755, 213, 4693, 425, 98456, 2708, 354,
     823, 408, 562],
    [123, 467, 634, 592, 487, 234, 652, 349, 345, 721, 438, 523, 749, 2324, 587, 627, 623, 4029, 394, 866, 126,
     498, 2014, 8675, 7362, 3478, 723, 4577, 61112, 359, 1213, 458, 6115, 23935, 8487, 8731, 27826, 7467, 5391, 623, 840, 756,
     658, 345, 876, 126, 540, 813, 424, 751, 8228, 634, 861, 243, 807, 807, 324, 599, 755, 213, 4983, 425, 986,
     278, 354, 5823, 408, 54562, 873, 458, 706, 587, 123, 46457, 634, 592, 487, 234, 652, 349, 34795, 721, 438, 523,
     749, 2534, 587, 627, 623, 409, 394, 866, 126, 498, 214, 865, 762, 348, 723, 457, 6128, 359, 123, 18458, 615,
     233, 487, 8791, 286, 767, 591, 623, 8740, 756, 658, 345, 8476, 1926, 5470, 8173, 424, 751, 828, 634, 89961, 243,
     8047, 807, 324, 50399, 755, 213, 4693, 425, 98456, 2708, 354, 823, 408, 562, 873, 458, 706, 4587, 1213, 467, 634,
     592, 4487, 21534, 652, 349, 3145, 7221, 438, 5123, 749, 234, 56787, 627, 6243, 4309, 394, 866, 126, 498, 2814, 865,
     7692, 348, 724444433, 457, 612, 359, 1233, 45008, 615, 233, 487, 84471, 2086, 7607, 591, 6234583, 8940, 756, 658, 345, 876,
     126, 5420, 8513, 4024, 751, 828, 634, 861, 243, 807, 807, 324, 599, 755, 2163, 493, 425, 986, 29078, 3594, 823,
     408, 56872, 873, 43858, 70386, 58435738, 123, 46787, 634, 592, 487, 234, 63852, 349, 345, 721, 438, 523, 749, 234, 587,
     627, 6523, 409, 394, 866, 126, 498, 214, 8465, 762, 348, 723, 4507, 612, 3579, 123, 458, 615, 233, 487, 5871,
     286, 7867, 5891, 6234543, 840, 756, 658, 345, 876, 126, 540, 813, 424, 751, 828, 634, 861, 2043, 8097, 807, 3424,
     599, 7555, 213, 4953, 425, 965886, 278, 354, 8023, 408, 562, 8873, 458, 706, 587, 1823, 48607, 6834, 5992, 487, 234,
     652, 349, 345, 735621, 438, 5723, 749, 2394, 9587, 62907, 6023, 4809, 394, 8966, 3126, 498, 21784, 8565, 7662, 34798, 7023,
     4857, 612, 3589, 123, 458, 6815, 233, 487, 871, 286, 7687, 55691, 623, 8840, 756, 6558, 345, 8736, 1266, 5540, 813,
     4294, 751, 87828, 634, 861, 243, 807, 807, 324, 599, 755, 213, 493, 425, 98686, 275458, 354, 9823, 408, 562, 1873,
     592, 4487, 21234, 652, 36649, 3145435, 721, 43653458, 5134523, 749, 234, 56787, 6342677, 6243, 46509, 394, 866, 1236, 498, 2814, 865,
     7692, 348, 723, 457, 612, 359, 1233, 458, 615, 233, 487, 84471, 286, 767, 591, 6283, 8940, 7556, 665558, 345, 87676,
     126, 5420, 8513, 4234, 751, 82865, 634, 3861, 243, 807, 80157, 35124, 599, 755, 2163, 493, 4255, 98366, 29078, 35554, 823,
     408, 56872, 85573, 45448, 7406, 587, 123, 46787, 634, 592, 48567, 234, 652, 349, 34565, 721, 438, 52563, 749, 234, 587,
     6027, 6523, 4099, 394, 866, 1444426, 4912348, 214, 843465, 76452, 348, 723, 4507, 612, 3579, 1203, 4508, 6105, 2303, 487, 5871,
     123, 467, 634, 592, 487, 234, 652, 349, 345, 721, 438, 523, 749, 2324, 587, 627, 623, 4029, 394, 866, 126,
     498, 2014, 8675, 7362, 3478, 723, 4577, 61112, 359, 1213, 458, 6115, 23935, 8487, 8731, 27826, 7467, 5391, 623,
     840, 756,
     658, 345, 876, 126, 540, 813, 424, 751, 8228, 634, 861, 243, 807, 807, 324, 599, 755, 213, 4983, 425, 986,
     278, 354, 5823, 408, 54562, 873, 458, 706, 587, 123, 46457, 634, 592, 487, 234, 652, 349, 34795, 721, 438, 523,
     749, 2534, 587, 627, 623, 409, 394, 866, 126, 498, 214, 865, 762, 348, 723, 457, 6128, 359, 123, 18458, 615,
     233, 487, 8791, 286, 767, 591, 623, 8740, 756, 658, 345, 8476, 1926, 5470, 8173, 424, 751, 828, 634, 89961, 243,
     8047, 807, 324, 50399, 755, 213, 4693, 425, 98456, 2708, 354, 823, 408, 562, 873, 458, 706, 4587, 1213, 467, 634,
     592, 4487, 21534, 652, 349, 3145, 7221, 438, 5123, 749, 234, 56787, 627, 6243, 4309, 394, 866, 126, 498, 2814, 865,
     7692, 348, 724444433, 457, 612, 359, 1233, 45008, 615, 233, 487, 84471, 2086, 7607, 591, 6234583, 8940, 756, 658,
     345, 876,
     126, 5420, 8513, 4024, 751, 828, 634, 861, 243, 807, 807, 324, 599, 755, 2163, 493, 425, 986, 29078, 3594, 823,
     408, 56872, 873, 43858, 70386, 58435738, 123, 46787, 634, 592, 487, 234, 63852, 349, 345, 721, 438, 523, 749, 234,
     587,
     627, 6523, 409, 394, 866, 126, 498, 214, 8465, 762, 348, 723, 4507, 612, 3579, 123, 458, 615, 233, 487, 5871,
     286, 7867, 5891, 6234543, 840, 756, 658, 345, 876, 126, 540, 813, 424, 751, 828, 634, 861, 2043, 8097, 807, 3424,
     599, 7555, 213, 4953, 425, 965886, 278, 354, 8023, 408, 562, 8873, 458, 706, 587, 1823, 48607, 6834, 5992, 487,
     234,
     652, 349, 345, 735621, 438, 5723, 749, 2394, 9587, 62907, 6023, 4809, 394, 8966, 3126, 498, 21784, 8565, 7662,
     34798, 7023,
     4857, 612, 3589, 123, 458, 6815, 233, 487, 871, 286, 7687, 55691, 623, 8840, 756, 6558, 345, 8736, 1266, 5540, 813,
     4294, 751, 87828, 634, 861, 243, 807, 807, 324, 599, 755, 213, 493, 425, 98686, 275458, 354, 9823, 408, 562, 1873,
     592, 4487, 21234, 652, 36649, 3145435, 721, 43653458, 5134523, 749, 234, 56787, 6342677, 6243, 46509, 394, 866,
     1236, 498, 2814, 865,
     7692, 348, 723, 457, 612, 359, 1233, 458, 615, 233, 487, 84471, 286, 767, 591, 6283, 8940, 7556, 665558, 345,
     87676,
     126, 5420, 8513, 4234, 751, 82865, 634, 3861, 243, 807, 80157, 35124, 599, 755, 2163, 493, 4255, 98366, 29078,
     35554, 823,
     408, 56872, 85573, 45448, 7406, 587, 123, 46787, 634, 592, 48567, 234, 652, 349, 34565, 721, 438, 52563, 749, 234,
     587,
     6027, 6523, 4099, 394, 866, 1444426, 4912348, 214, 843465, 76452, 348, 723, 4507, 612, 3579, 1203, 4508, 6105,
     2303, 487, 5871]]


def test_get_min():
    print()
    for i in test_data:
        f_time = time.time()
        assert get_min(i) == min(i)
        print(sys.getsizeof(i), 'bytes for ', time.time() - f_time)


def test_get_max():
    print()
    for i in test_data:
        f_time = time.time()
        assert get_max(i) == max(i)
        print(sys.getsizeof(i), 'bytes for ', (time.time() - f_time))


def test_get_sum():
    print()
    for i in test_data:
        f_time = time.time()
        assert get_sum(i) == sum(i)
        print(sys.getsizeof(i), 'bytes for ', (time.time() - f_time))


def test_get_multiply():
    print()
    for i in test_data:
        f_time = time.time()
        assert get_multiply(i) == math.prod(i)
        print(sys.getsizeof(i), 'bytes for ', (time.time() - f_time))


def test_get_pow_of_sum():
    print()
    for i in test_data:
        f_time = time.time()
        assert get_pow_of_sum(i) == pow(sum(i), 2)
        print(sys.getsizeof(i), 'bytes for ', (time.time() - f_time))
